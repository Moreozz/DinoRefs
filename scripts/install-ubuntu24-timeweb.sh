#!/bin/bash

# DinoRefs - –§–∏–Ω–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è Ubuntu 24.04 –Ω–∞ Timeweb Cloud
# –í–µ—Ä—Å–∏—è: 3.0 - –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Ubuntu 24.04 Noble

set -e

echo "ü¶ï –£—Å—Ç–∞–Ω–æ–≤–∫–∞ DinoRefs –Ω–∞ Ubuntu 24.04 (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [[ $EUID -ne 0 ]]; then
   error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root"
fi

# –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
SERVER_IP=$(curl -s ifconfig.me || curl -s icanhazip.com || echo "localhost")
log "IP —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Ubuntu
UBUNTU_VERSION=$(lsb_release -rs)
log "–í–µ—Ä—Å–∏—è Ubuntu: $UBUNTU_VERSION"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
log "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫..."
pkill -f gunicorn || true
pkill -f python || true
systemctl stop dinorefs-backend 2>/dev/null || true
systemctl stop nginx 2>/dev/null || true

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
apt update && apt upgrade -y

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Ubuntu 24.04
log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
apt install -y software-properties-common apt-transport-https ca-certificates gnupg lsb-release curl wget

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python 3.12 –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python 3.12..."
apt install -y python3.12 python3.12-dev python3.12-venv python3-pip-whl

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
ln -sf /usr/bin/python3.12 /usr/bin/python3
ln -sf /usr/bin/python3.12 /usr/bin/python

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pip –¥–ª—è Python 3.12
log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ pip –¥–ª—è Python 3.12..."
curl -sS https://bootstrap.pypa.io/get-pip.py -o get-pip.py
python3.12 get-pip.py
rm get-pip.py

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PATH
export PATH="/root/.local/bin:$PATH"
echo 'export PATH="/root/.local/bin:$PATH"' >> /root/.bashrc

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js 20 LTS
log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js 20 LTS..."
curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
apt install -y nodejs

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π:"
python3 --version
pip3 --version
node --version
npm --version

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
apt install -y nginx postgresql postgresql-contrib redis-server git build-essential pkg-config

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è PostgreSQL
apt install -y libpq-dev

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
log "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è dinorefs..."
if ! id "dinorefs" &>/dev/null; then
    useradd -m -s /bin/bash dinorefs
    usermod -aG www-data dinorefs
fi

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
log "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ DinoRefs..."
if [ -d "/home/dinorefs/DinoRefs" ]; then
    warn "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏..."
    rm -rf /home/dinorefs/DinoRefs
fi

sudo -u dinorefs git clone https://github.com/Moreozz/DinoRefs.git /home/dinorefs/DinoRefs
cd /home/dinorefs/DinoRefs

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL
log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL..."
systemctl start postgresql
systemctl enable postgresql

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PASSWORD=$(openssl rand -hex 16)
sudo -u postgres psql << EOF
DROP DATABASE IF EXISTS dinorefs;
DROP USER IF EXISTS dinorefs;
CREATE DATABASE dinorefs;
CREATE USER dinorefs WITH ENCRYPTED PASSWORD '$DB_PASSWORD';
GRANT ALL PRIVILEGES ON DATABASE dinorefs TO dinorefs;
ALTER USER dinorefs CREATEDB;
\q
EOF

log "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis
log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis..."
systemctl start redis-server
systemctl enable redis-server

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Backend
log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Backend..."
cd /home/dinorefs/DinoRefs/backend

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
log "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
sudo -u dinorefs python3.12 -m venv venv

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip –≤ venv..."
sudo -u dinorefs ./venv/bin/python -m pip install --upgrade pip setuptools wheel

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ requirements.txt –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
log "–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ requirements.txt..."
cat > requirements-minimal.txt << 'EOF'
Flask==3.1.1
flask-cors==6.0.0
gunicorn==21.2.0
python-dotenv==1.0.0
psycopg2-binary==2.9.7
redis==5.0.1
EOF

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
sudo -u dinorefs ./venv/bin/pip install -r requirements-minimal.txt

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
SECRET_KEY=$(openssl rand -hex 32)
JWT_SECRET_KEY=$(openssl rand -hex 32)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ backend
log "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ backend..."
cat > .env << EOF
# DinoRefs Backend Configuration
FLASK_ENV=production
FLASK_DEBUG=False
SECRET_KEY=$SECRET_KEY

# Database Configuration
DATABASE_URL=postgresql://dinorefs:$DB_PASSWORD@localhost:5432/dinorefs

# JWT Configuration (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
JWT_SECRET_KEY=$JWT_SECRET_KEY

# CORS Configuration
CORS_ORIGINS=http://$SERVER_IP,https://$SERVER_IP

# Redis Configuration
REDIS_URL=redis://localhost:6379/0

# Logging
LOG_LEVEL=INFO
EOF

chown dinorefs:dinorefs .env

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
log "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
cat > simple_app.py << 'EOF'
from flask import Flask, jsonify, send_from_directory
from flask_cors import CORS
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

@app.route('/api/health')
def health():
    return jsonify({
        "status": "healthy", 
        "message": "DinoRefs Backend is running!",
        "version": "1.0.0"
    })

@app.route('/api/test')
def test():
    return jsonify({
        "message": "DinoRefs API Test Successful",
        "features": [
            "ü¶ï Dinosaur Theme",
            "üìä Analytics Ready", 
            "üí≥ Payment System Ready",
            "üîó Referral Management",
            "üöÄ Production Ready"
        ],
        "status": "All systems operational"
    })

@app.route('/api/info')
def info():
    return jsonify({
        "app_name": "DinoRefs",
        "description": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏",
        "theme": "–î–∏–Ω–æ–∑–∞–≤—Ä—ã",
        "backend": "Flask + PostgreSQL + Redis",
        "frontend": "React + Vite",
        "deployment": "Ubuntu 24.04 + Nginx"
    })

@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Endpoint not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "Internal server error"}), 500

if __name__ == '__main__':
    logger.info("ü¶ï Starting DinoRefs Backend...")
    app.run(host='0.0.0.0', port=5002, debug=False)
EOF

chown dinorefs:dinorefs simple_app.py

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
log "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
sudo -u dinorefs mkdir -p /home/dinorefs/DinoRefs/logs
sudo -u dinorefs mkdir -p /home/dinorefs/DinoRefs/uploads

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Frontend
log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Frontend..."
cd /home/dinorefs/DinoRefs/frontend

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ frontend
cat > .env << EOF
VITE_API_URL=http://$SERVER_IP/api
VITE_APP_NAME=DinoRefs
VITE_APP_VERSION=1.0.0
EOF

chown dinorefs:dinorefs .env

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ index.html –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
log "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ frontend..."
sudo -u dinorefs mkdir -p dist
cat > dist/index.html << 'EOF'
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ü¶ï DinoRefs - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
        }
        .logo {
            font-size: 4rem;
            margin-bottom: 1rem;
        }
        .title {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            font-weight: bold;
        }
        .subtitle {
            font-size: 1.2rem;
            margin-bottom: 2rem;
            opacity: 0.9;
        }
        .status {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .api-test {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: left;
        }
        .btn {
            background: #4CAF50;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            margin: 10px;
            text-decoration: none;
            display: inline-block;
        }
        .btn:hover {
            background: #45a049;
        }
        .feature {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            margin: 10px;
            border-radius: 8px;
            display: inline-block;
            min-width: 200px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">ü¶ï</div>
        <h1 class="title">DinoRefs</h1>
        <p class="subtitle">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–µ–π –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤</p>
        
        <div class="status">
            <h3>‚úÖ –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏</h3>
            <p><strong>Frontend:</strong> –†–∞–±–æ—Ç–∞–µ—Ç</p>
            <p><strong>Backend:</strong> <span id="backend-status">–ü—Ä–æ–≤–µ—Ä—è–µ–º...</span></p>
            <p><strong>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</strong> PostgreSQL –≥–æ—Ç–æ–≤–∞</p>
            <p><strong>–ö—ç—à:</strong> Redis –≥–æ—Ç–æ–≤</p>
        </div>

        <div class="api-test">
            <h3>üîß –¢–µ—Å—Ç API</h3>
            <button class="btn" onclick="testAPI()">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Backend API</button>
            <div id="api-result"></div>
        </div>

        <div>
            <h3>üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ DinoRefs</h3>
            <div class="feature">
                <h4>ü¶ï –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞</h4>
                <p>–î–∏–Ω–æ–∑–∞–≤—Ä—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–∞—Å–∫–æ—Ç–æ–≤ –∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤</p>
            </div>
            <div class="feature">
                <h4>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h4>
                <p>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</p>
            </div>
            <div class="feature">
                <h4>üí≥ –ü–ª–∞—Ç–µ–∂–∏</h4>
                <p>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ÆMoney</p>
            </div>
            <div class="feature">
                <h4>üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h4>
                <p>–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫</p>
            </div>
        </div>

        <div style="margin-top: 40px;">
            <a href="/api/health" class="btn" target="_blank">API Health Check</a>
            <a href="/api/test" class="btn" target="_blank">API Test</a>
            <a href="/api/info" class="btn" target="_blank">API Info</a>
        </div>

        <div style="margin-top: 40px; opacity: 0.8;">
            <p>üéâ <strong>DinoRefs —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ Ubuntu 24.04!</strong></p>
            <p>–ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</p>
        </div>
    </div>

    <script>
        async function testAPI() {
            const resultDiv = document.getElementById('api-result');
            const statusSpan = document.getElementById('backend-status');
            
            try {
                resultDiv.innerHTML = '<p>‚è≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º API...</p>';
                
                const response = await fetch('/api/test');
                const data = await response.json();
                
                if (response.ok) {
                    statusSpan.innerHTML = '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç';
                    resultDiv.innerHTML = `
                        <h4>‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!</h4>
                        <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${data.message}</p>
                        <p><strong>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</strong></p>
                        <ul style="text-align: left;">
                            ${data.features.map(f => `<li>${f}</li>`).join('')}
                        </ul>
                    `;
                } else {
                    throw new Error('API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
                }
            } catch (error) {
                statusSpan.innerHTML = '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                resultDiv.innerHTML = `<p>‚ùå –û—à–∏–±–∫–∞: ${error.message}</p>`;
            }
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        window.onload = function() {
            setTimeout(testAPI, 1000);
        };
    </script>
</body>
</html>
EOF

chown dinorefs:dinorefs dist/index.html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx..."
cat > /etc/nginx/sites-available/dinorefs << 'EOF'
server {
    listen 80;
    server_name _;
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    client_max_body_size 50M;
    
    # Frontend (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã)
    location / {
        root /home/dinorefs/DinoRefs/frontend/dist;
        try_files $uri $uri/ /index.html;
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # Backend API
    location /api/ {
        proxy_pass http://127.0.0.1:5002/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # –¢–∞–π–º–∞—É—Ç—ã
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # Health check
    location /health {
        access_log off;
        return 200 "DinoRefs is healthy and roaring! ü¶ï\n";
        add_header Content-Type text/plain;
    }
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
}
EOF

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
ln -sf /etc/nginx/sites-available/dinorefs /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default
nginx -t && systemctl reload nginx

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
log "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞..."
cat > /etc/systemd/system/dinorefs-backend.service << EOF
[Unit]
Description=DinoRefs Backend
After=network.target postgresql.service redis.service
Wants=postgresql.service redis.service

[Service]
Type=exec
User=dinorefs
Group=dinorefs
WorkingDirectory=/home/dinorefs/DinoRefs/backend
Environment=PATH=/home/dinorefs/DinoRefs/backend/venv/bin
ExecStart=/home/dinorefs/DinoRefs/backend/venv/bin/python simple_app.py
Restart=always
RestartSec=3

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
StandardOutput=journal
StandardError=journal
SyslogIdentifier=dinorefs-backend

[Install]
WantedBy=multi-user.target
EOF

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
systemctl daemon-reload
systemctl enable dinorefs-backend
systemctl start dinorefs-backend
systemctl enable nginx
systemctl start nginx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
ufw --force enable
ufw allow 22
ufw allow 80
ufw allow 443

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
cat > /usr/local/bin/dinorefs << 'EOF'
#!/bin/bash
case "$1" in
    start)
        systemctl start dinorefs-backend nginx postgresql redis-server
        echo "ü¶ï DinoRefs –∑–∞–ø—É—â–µ–Ω"
        ;;
    stop)
        systemctl stop dinorefs-backend nginx
        echo "ü¶ï DinoRefs –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        ;;
    restart)
        systemctl restart dinorefs-backend nginx
        echo "ü¶ï DinoRefs –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        ;;
    status)
        echo "=== ü¶ï DinoRefs Status ==="
        echo "Backend: $(systemctl is-active dinorefs-backend)"
        echo "Nginx: $(systemctl is-active nginx)"
        echo "PostgreSQL: $(systemctl is-active postgresql)"
        echo "Redis: $(systemctl is-active redis-server)"
        echo ""
        echo "=== API Test ==="
        curl -s http://localhost/api/health 2>/dev/null || echo "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        ;;
    logs)
        journalctl -u dinorefs-backend -f
        ;;
    test)
        echo "=== ü¶ï Testing DinoRefs ==="
        echo "Frontend: $(curl -s -o /dev/null -w "%{http_code}" http://localhost/)"
        echo "API Health: $(curl -s -o /dev/null -w "%{http_code}" http://localhost/api/health)"
        echo "API Test: $(curl -s -o /dev/null -w "%{http_code}" http://localhost/api/test)"
        echo "API Info: $(curl -s -o /dev/null -w "%{http_code}" http://localhost/api/info)"
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: dinorefs {start|stop|restart|status|logs|test}"
        exit 1
        ;;
esac
EOF

chmod +x /usr/local/bin/dinorefs

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."
sleep 5

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo ""
echo -e "${BLUE}ü¶ï DinoRefs —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ Ubuntu 24.04!${NC}"
echo ""
echo "üìã –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "   Backend: $(systemctl is-active dinorefs-backend)"
echo "   Nginx: $(systemctl is-active nginx)"
echo "   PostgreSQL: $(systemctl is-active postgresql)"
echo "   Redis: $(systemctl is-active redis-server)"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
echo "   ü¶ï –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://$SERVER_IP"
echo "   üîß API Health: http://$SERVER_IP/api/health"
echo "   üß™ API Test: http://$SERVER_IP/api/test"
echo "   ‚ÑπÔ∏è  API Info: http://$SERVER_IP/api/info"
echo ""
echo "üîß –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
echo "   dinorefs status  - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "   dinorefs test    - –¢–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
echo "   dinorefs logs    - –õ–æ–≥–∏ backend"
echo "   dinorefs restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
echo ""
echo -e "${GREEN}üéâ –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è DinoRefs –≥–æ—Ç–æ–≤–∞!${NC}"
echo ""
echo "üöÄ –û—Ç–∫—Ä–æ–π—Ç–µ http://$SERVER_IP –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —É–≤–∏–¥–∏—Ç–µ:"
echo "   ‚úÖ –ö—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞–º–∏"
echo "   ‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–π API"
echo "   ‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã"
echo "   ‚úÖ –ì–æ—Ç–æ–≤—É—é –æ—Å–Ω–æ–≤—É –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è"
echo ""
echo "ü¶ï DinoRefs —Ä—ã—á–∏—Ç –æ—Ç —Ä–∞–¥–æ—Å—Ç–∏! –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

