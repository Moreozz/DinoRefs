import React, { useState, useEffect } from 'react';
import LazyImage from './LazyImage';
import { Sparkles, Heart, Star, Zap } from 'lucide-react';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∞—Å–∫–æ—Ç–∞ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –¥–ª—è DinoRefs
 */
const DinoMascot = ({
  variant = 'business', // business, friendly, mascot, icon
  size = 'medium', // small, medium, large, xl
  animation = 'none', // none, bounce, pulse, wiggle, float
  showEffects = false,
  message = '',
  className = '',
  onClick,
  ...props
}) => {
  const [isAnimating, setIsAnimating] = useState(false);
  const [showMessage, setShowMessage] = useState(false);

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤
  const dinoVariants = {
    business: {
      src: '/images/dinosaurs/business-dino.jpg',
      alt: '–î–µ–ª–æ–≤–æ–π –¥–∏–Ω–æ–∑–∞–≤—Ä DinoRefs',
      description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º'
    },
    friendly: {
      src: '/images/dinosaurs/friendly-dino.jpg',
      alt: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –¥–∏–Ω–æ–∑–∞–≤—Ä DinoRefs',
      description: '–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'
    },
    mascot: {
      src: '/images/dinosaurs/mascot-dino.jpg',
      alt: '–ú–∞—Å–∫–æ—Ç –¥–∏–Ω–æ–∑–∞–≤—Ä DinoRefs',
      description: '–í–µ—Å–µ–ª—ã–π –º–∞—Å–∫–æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã DinoRefs'
    },
    icon: {
      src: '/images/dinosaurs/dino-icons.jpg',
      alt: '–ò–∫–æ–Ω–∫–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ DinoRefs',
      description: '–ù–∞–±–æ—Ä –∏–∫–æ–Ω–æ–∫ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞–º–∏'
    }
  };

  // –†–∞–∑–º–µ—Ä—ã
  const sizes = {
    small: 'w-12 h-12',
    medium: 'w-24 h-24',
    large: 'w-32 h-32',
    xl: 'w-48 h-48'
  };

  // –ê–Ω–∏–º–∞—Ü–∏–∏
  const animations = {
    none: '',
    bounce: 'animate-bounce',
    pulse: 'animate-pulse',
    wiggle: 'animate-wiggle',
    float: 'animate-float'
  };

  // –≠—Ñ—Ñ–µ–∫—Ç—ã
  const effects = [
    { icon: Sparkles, color: 'text-yellow-400', delay: 0 },
    { icon: Heart, color: 'text-red-400', delay: 200 },
    { icon: Star, color: 'text-blue-400', delay: 400 },
    { icon: Zap, color: 'text-green-400', delay: 600 }
  ];

  const currentDino = dinoVariants[variant] || dinoVariants.business;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
  const handleClick = () => {
    if (onClick) {
      onClick();
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    setIsAnimating(true);
    setTimeout(() => setIsAnimating(false), 1000);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (message) {
      setShowMessage(true);
      setTimeout(() => setShowMessage(false), 3000);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  useEffect(() => {
    if (message && !showMessage) {
      const timer = setTimeout(() => {
        setShowMessage(true);
        setTimeout(() => setShowMessage(false), 3000);
      }, 2000);

      return () => clearTimeout(timer);
    }
  }, [message, showMessage]);

  return (
    <div className={`relative inline-block ${className}`} {...props}>
      {/* –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ */}
      <div
        className={`
          relative cursor-pointer transition-all duration-300 transform
          ${sizes[size]}
          ${animations[animation]}
          ${isAnimating ? 'scale-110' : 'hover:scale-105'}
          ${onClick ? 'hover:brightness-110' : ''}
        `}
        onClick={handleClick}
      >
        <LazyImage
          src={currentDino.src}
          alt={currentDino.alt}
          className="w-full h-full object-contain rounded-lg"
          showLoader={true}
          showErrorIcon={true}
        />

        {/* –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */}
        {showEffects && (
          <div className="absolute inset-0 pointer-events-none">
            {effects.map((Effect, index) => (
              <Effect.icon
                key={index}
                className={`
                  absolute w-4 h-4 ${Effect.color}
                  animate-ping opacity-0 hover:opacity-100
                  transition-opacity duration-300
                `}
                style={{
                  top: `${Math.random() * 80}%`,
                  left: `${Math.random() * 80}%`,
                  animationDelay: `${Effect.delay}ms`
                }}
              />
            ))}
          </div>
        )}

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
        {onClick && (
          <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse" />
        )}
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ */}
      {message && showMessage && (
        <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 z-10">
          <div className="relative bg-white border-2 border-green-200 rounded-lg px-3 py-2 shadow-lg max-w-xs">
            <p className="text-sm text-gray-700 text-center">{message}</p>
            
            {/* –•–≤–æ—Å—Ç–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è */}
            <div className="absolute top-full left-1/2 transform -translate-x-1/2">
              <div className="border-l-8 border-r-8 border-t-8 border-transparent border-t-green-200" />
              <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-px">
                <div className="border-l-6 border-r-6 border-t-6 border-transparent border-t-white" />
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è accessibility */}
      <span className="sr-only">{currentDino.description}</span>
    </div>
  );
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥—Ä—É–ø–ø—ã –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
 */
export const DinoTierDisplay = ({ tier = 'free', animated = true }) => {
  const tierConfigs = {
    free: {
      dino: 'friendly',
      size: 'medium',
      animation: 'pulse',
      message: 'ü•ö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DinoRefs! –ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.',
      effects: false
    },
    starter: {
      dino: 'business',
      size: 'large',
      animation: 'bounce',
      message: 'ü¶ï –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü–ª–∞–Ω Starter –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞—Å—Ç–∏.',
      effects: true
    },
    growth: {
      dino: 'mascot',
      size: 'large',
      animation: 'wiggle',
      message: 'ü¶ñ –ú–æ—â–Ω—ã–π –ø–ª–∞–Ω Growth –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞!',
      effects: true
    },
    enterprise: {
      dino: 'business',
      size: 'xl',
      animation: 'float',
      message: 'üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–ª–∏—Ç–Ω—ã–π –∫–ª—É–± Enterprise!',
      effects: true
    }
  };

  const config = tierConfigs[tier] || tierConfigs.free;

  return (
    <DinoMascot
      variant={config.dino}
      size={config.size}
      animation={animated ? config.animation : 'none'}
      message={config.message}
      showEffects={config.effects}
      className="mx-auto"
    />
  );
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∏–Ω–æ–∑–∞–≤—Ä–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
 */
export const DinoHelper = ({ 
  context = 'general', 
  tips = [],
  position = 'bottom-right' 
}) => {
  const [currentTip, setCurrentTip] = useState(0);
  const [showTips, setShowTips] = useState(false);

  const contextMessages = {
    general: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ DinoRefs. –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?',
    dashboard: '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏!',
    projects: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.',
    analytics: '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.',
    pricing: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!',
    profile: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.'
  };

  const positionClasses = {
    'bottom-right': 'fixed bottom-4 right-4 z-50',
    'bottom-left': 'fixed bottom-4 left-4 z-50',
    'top-right': 'fixed top-4 right-4 z-50',
    'top-left': 'fixed top-4 left-4 z-50'
  };

  // –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
  useEffect(() => {
    if (tips.length > 1 && showTips) {
      const interval = setInterval(() => {
        setCurrentTip((prev) => (prev + 1) % tips.length);
      }, 4000);

      return () => clearInterval(interval);
    }
  }, [tips.length, showTips]);

  const handleDinoClick = () => {
    if (tips.length > 0) {
      setShowTips(!showTips);
    }
  };

  const currentMessage = showTips && tips.length > 0 
    ? tips[currentTip] 
    : contextMessages[context];

  return (
    <div className={positionClasses[position]}>
      <DinoMascot
        variant="friendly"
        size="medium"
        animation="float"
        message={currentMessage}
        showEffects={true}
        onClick={handleDinoClick}
        className="drop-shadow-lg"
      />
      
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ */}
      {tips.length > 0 && (
        <div className="absolute -top-2 -left-2 bg-blue-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center">
          {tips.length}
        </div>
      )}
    </div>
  );
};

// –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ CSS
const customAnimations = `
  @keyframes wiggle {
    0%, 7% { transform: rotateZ(0); }
    15% { transform: rotateZ(-15deg); }
    20% { transform: rotateZ(10deg); }
    25% { transform: rotateZ(-10deg); }
    30% { transform: rotateZ(6deg); }
    35% { transform: rotateZ(-4deg); }
    40%, 100% { transform: rotateZ(0); }
  }

  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
  }

  .animate-wiggle {
    animation: wiggle 2s ease-in-out infinite;
  }

  .animate-float {
    animation: float 3s ease-in-out infinite;
  }
`;

// –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏
if (typeof document !== 'undefined') {
  const styleSheet = document.createElement('style');
  styleSheet.textContent = customAnimations;
  document.head.appendChild(styleSheet);
}

export default DinoMascot;

