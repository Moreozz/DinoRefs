import React, { useState, useEffect } from 'react';
import { 
  CheckCircle, 
  Copy, 
  QrCode, 
  ExternalLink, 
  Share2, 
  Download,
  Eye,
  Users,
  Target,
  Gift,
  Calendar,
  Hash,
  Link,
  Smartphone,
  Globe,
  BarChart3,
  Zap,
  Star,
  Award,
  TrendingUp
} from 'lucide-react';

const CampaignSummary = ({ campaignData, channelConfigs, onSave, onEdit }) => {
  const [generatedLinks, setGeneratedLinks] = useState({});
  const [qrCodes, setQrCodes] = useState({});
  const [isGenerating, setIsGenerating] = useState(false);
  const [copiedLink, setCopiedLink] = useState(null);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫ –∏ QR-–∫–æ–¥–æ–≤
  useEffect(() => {
    generatePreviewLinks();
  }, [campaignData, channelConfigs]);

  const generatePreviewLinks = () => {
    const links = {};
    const qrs = {};
    
    Object.keys(channelConfigs).forEach(channelId => {
      const config = channelConfigs[channelId];
      const baseUrl = 'https://dinorefs.com/r/';
      const shortCode = generateShortCode();
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ —Å UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const utmParams = new URLSearchParams({
        utm_source: config.utm_source || channelId,
        utm_medium: config.utm_medium || 'referral',
        utm_campaign: config.utm_campaign || campaignData.title.toLowerCase().replace(/\s+/g, '-'),
        utm_content: channelId
      });
      
      links[channelId] = {
        short: `${baseUrl}${shortCode}`,
        full: `${baseUrl}${shortCode}?${utmParams.toString()}`,
        qr: `${baseUrl}qr/${shortCode}`,
        shortCode
      };
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤)
      qrs[channelId] = `data:image/svg+xml;base64,${btoa(generateQRSVG(links[channelId].full))}`;
    });
    
    setGeneratedLinks(links);
    setQrCodes(qrs);
  };

  const generateShortCode = () => {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
  };

  const generateQRSVG = (url) => {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è QR-–∫–æ–¥–∞
    return `<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
      <rect width="100" height="100" fill="white"/>
      <rect x="10" y="10" width="80" height="80" fill="black"/>
      <rect x="20" y="20" width="60" height="60" fill="white"/>
      <text x="50" y="55" text-anchor="middle" font-size="8" fill="black">QR</text>
    </svg>`;
  };

  const copyToClipboard = async (text, linkId) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedLink(linkId);
      setTimeout(() => setCopiedLink(null), 2000);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
    }
  };

  const downloadQR = (channelId, channelName) => {
    const qrData = qrCodes[channelId];
    if (qrData) {
      const link = document.createElement('a');
      link.href = qrData;
      link.download = `qr-${channelName}-${campaignData.title}.svg`;
      link.click();
    }
  };

  const getTotalSteps = () => {
    return Object.values(channelConfigs).reduce((total, config) => {
      return total + (config.steps?.length || 0);
    }, 0);
  };

  const getTotalRewards = () => {
    return Object.values(channelConfigs).reduce((total, config) => {
      return total + (config.steps?.reduce((stepTotal, step) => {
        return stepTotal + (step.reward_points || 0);
      }, 0) || 0);
    }, 0);
  };

  const getChannelInfo = (channelId) => {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ –∏–∑ ChannelSelector
    const channelMap = {
      telegram: { name: 'Telegram', icon: 'üì±', color: 'bg-blue-500' },
      vk: { name: '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', icon: 'üîµ', color: 'bg-blue-600' },
      instagram: { name: 'Instagram', icon: 'üì∑', color: 'bg-pink-500' },
      youtube: { name: 'YouTube', icon: 'üì∫', color: 'bg-red-500' },
      website: { name: '–°–∞–π—Ç', icon: 'üåê', color: 'bg-gray-500' },
      offline: { name: '–û—Ñ–ª–∞–π–Ω', icon: 'üè™', color: 'bg-purple-500' }
    };
    
    return channelMap[channelId] || { name: channelId, icon: 'üì±', color: 'bg-gray-500' };
  };

  const CampaignTreeVisualization = () => {
    return (
      <div className="bg-gradient-to-br from-blue-50 to-purple-50 border border-gray-200 rounded-lg p-6">
        <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
          <Target className="w-5 h-5 mr-2 text-blue-600" />
          –°—Ö–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        </h4>
        
        <div className="space-y-4">
          {/* –ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è */}
          <div className="text-center">
            <div className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg shadow-lg">
              <Award className="w-5 h-5 mr-2" />
              <span className="font-semibold">{campaignData.title}</span>
            </div>
            <p className="text-sm text-gray-600 mt-2">{campaignData.description}</p>
          </div>

          {/* –í–µ—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ */}
          <div className="flex justify-center">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-4xl">
              {Object.keys(channelConfigs).map(channelId => {
                const config = channelConfigs[channelId];
                const channelInfo = getChannelInfo(channelId);
                
                return (
                  <div key={channelId} className="relative">
                    {/* –õ–∏–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
                    <div className="absolute top-0 left-1/2 w-px h-8 bg-gray-300 transform -translate-x-1/2 -translate-y-8"></div>
                    
                    {/* –ö–∞–Ω–∞–ª */}
                    <div className={`${channelInfo.color} text-white rounded-lg p-4 shadow-md`}>
                      <div className="flex items-center justify-center mb-3">
                        <span className="text-2xl mr-2">{channelInfo.icon}</span>
                        <span className="font-medium">{channelInfo.name}</span>
                      </div>
                      
                      {/* –®–∞–≥–∏ –∫–∞–Ω–∞–ª–∞ */}
                      <div className="space-y-2">
                        {config.steps?.map((step, index) => (
                          <div key={step.id} className="bg-white bg-opacity-20 rounded px-3 py-2">
                            <div className="flex items-center justify-between">
                              <span className="text-sm font-medium">
                                {index + 1}. {getStepTypeName(step.type)}
                              </span>
                              <div className="flex items-center space-x-1">
                                <Gift className="w-3 h-3" />
                                <span className="text-xs">{step.reward_points}</span>
                              </div>
                            </div>
                          </div>
                        )) || (
                          <div className="text-center text-white text-opacity-70 text-sm">
                            –ù–µ—Ç —à–∞–≥–æ–≤
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    );
  };

  const getStepTypeName = (type) => {
    const stepNames = {
      registration: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
      email_confirmation: 'Email',
      phone_confirmation: '–¢–µ–ª–µ—Ñ–æ–Ω',
      purchase_confirmation: '–ü–æ–∫—É–ø–∫–∞',
      photo_upload: '–§–æ—Ç–æ',
      content_view: '–ü—Ä–æ—Å–º–æ—Ç—Ä',
      quiz_completion: '–¢–µ—Å—Ç',
      social_share: '–†–µ–ø–æ—Å—Ç',
      subscription: '–ü–æ–¥–ø–∏—Å–∫–∞',
      form_submission: '–§–æ—Ä–º–∞'
    };
    return stepNames[type] || type;
  };

  const LinkCard = ({ channelId, channelName, links }) => {
    return (
      <div className="bg-white border border-gray-200 rounded-lg p-4">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center space-x-2">
            <span className="text-lg">{getChannelInfo(channelId).icon}</span>
            <h4 className="font-medium text-gray-900">{channelName}</h4>
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => downloadQR(channelId, channelName)}
              className="p-2 text-gray-400 hover:text-gray-600 rounded-md hover:bg-gray-100"
              title="–°–∫–∞—á–∞—Ç—å QR-–∫–æ–¥"
            >
              <Download className="w-4 h-4" />
            </button>
          </div>
        </div>

        <div className="space-y-3">
          {/* –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ */}
          <div>
            <label className="block text-xs font-medium text-gray-700 mb-1">
              –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞
            </label>
            <div className="flex items-center space-x-2">
              <input
                type="text"
                value={links.short}
                readOnly
                className="flex-1 px-3 py-2 bg-gray-50 border border-gray-300 rounded-md text-sm"
              />
              <button
                onClick={() => copyToClipboard(links.short, `${channelId}-short`)}
                className={`p-2 rounded-md transition-colors ${
                  copiedLink === `${channelId}-short`
                    ? 'bg-green-100 text-green-600'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {copiedLink === `${channelId}-short` ? (
                  <CheckCircle className="w-4 h-4" />
                ) : (
                  <Copy className="w-4 h-4" />
                )}
              </button>
            </div>
          </div>

          {/* –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å UTM */}
          <div>
            <label className="block text-xs font-medium text-gray-700 mb-1">
              –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å UTM
            </label>
            <div className="flex items-center space-x-2">
              <input
                type="text"
                value={links.full}
                readOnly
                className="flex-1 px-3 py-2 bg-gray-50 border border-gray-300 rounded-md text-sm"
              />
              <button
                onClick={() => copyToClipboard(links.full, `${channelId}-full`)}
                className={`p-2 rounded-md transition-colors ${
                  copiedLink === `${channelId}-full`
                    ? 'bg-green-100 text-green-600'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {copiedLink === `${channelId}-full` ? (
                  <CheckCircle className="w-4 h-4" />
                ) : (
                  <Copy className="w-4 h-4" />
                )}
              </button>
            </div>
          </div>

          {/* QR-–∫–æ–¥ */}
          <div className="flex items-center justify-between">
            <div>
              <label className="block text-xs font-medium text-gray-700 mb-1">
                QR-–∫–æ–¥
              </label>
              <div className="w-16 h-16 bg-gray-100 border border-gray-300 rounded-md flex items-center justify-center">
                <img 
                  src={qrCodes[channelId]} 
                  alt="QR Code" 
                  className="w-12 h-12"
                />
              </div>
            </div>
            <div className="text-right">
              <div className="text-xs text-gray-500 mb-1">–ö–æ–¥: {links.shortCode}</div>
              <div className="flex space-x-1">
                <button
                  onClick={() => copyToClipboard(links.qr, `${channelId}-qr`)}
                  className="px-2 py-1 text-xs bg-blue-100 text-blue-600 rounded hover:bg-blue-200"
                >
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å QR
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const StatCard = ({ icon: Icon, title, value, description, color = "blue" }) => {
    const colorClasses = {
      blue: "bg-blue-50 text-blue-600 border-blue-200",
      green: "bg-green-50 text-green-600 border-green-200",
      purple: "bg-purple-50 text-purple-600 border-purple-200",
      orange: "bg-orange-50 text-orange-600 border-orange-200"
    };

    return (
      <div className={`border rounded-lg p-4 ${colorClasses[color]}`}>
        <div className="flex items-center space-x-3">
          <div className="p-2 rounded-lg bg-white">
            <Icon className="w-5 h-5" />
          </div>
          <div>
            <div className="text-2xl font-bold">{value}</div>
            <div className="text-sm font-medium">{title}</div>
            <div className="text-xs opacity-75">{description}</div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      <div className="text-center mb-6">
        <h3 className="text-xl font-semibold text-gray-900 mb-2">
          –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
        </h3>
        <p className="text-gray-600">
          –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
        </p>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        <StatCard
          icon={Users}
          title="–ö–∞–Ω–∞–ª–æ–≤"
          value={Object.keys(channelConfigs).length}
          description="–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤"
          color="blue"
        />
        <StatCard
          icon={Target}
          title="–®–∞–≥–æ–≤"
          value={getTotalSteps()}
          description="–í—Å–µ–≥–æ —à–∞–≥–æ–≤"
          color="green"
        />
        <StatCard
          icon={Gift}
          title="–ë–∞–ª–ª–æ–≤"
          value={getTotalRewards()}
          description="–ú–∞–∫—Å–∏–º—É–º –Ω–∞–≥—Ä–∞–¥"
          color="purple"
        />
        <StatCard
          icon={Calendar}
          title="–¢–∏–ø"
          value={campaignData.campaign_type}
          description="–¢–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏"
          color="orange"
        />
      </div>

      {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–µ–≤–∞ */}
      <CampaignTreeVisualization />

      {/* –î–µ—Ç–∞–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏ */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <h4 className="text-lg font-semibold text-gray-900 mb-4">–î–µ—Ç–∞–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h5 className="font-medium text-gray-900 mb-2">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h5>
            <div className="space-y-2 text-sm">
              <div><span className="text-gray-600">–ù–∞–∑–≤–∞–Ω–∏–µ:</span> {campaignData.title}</div>
              <div><span className="text-gray-600">–û–ø–∏—Å–∞–Ω–∏–µ:</span> {campaignData.description}</div>
              <div><span className="text-gray-600">–¢–∏–ø:</span> {campaignData.campaign_type}</div>
              <div><span className="text-gray-600">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</span> {campaignData.end_date || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
            </div>
          </div>
          <div>
            <h5 className="font-medium text-gray-900 mb-2">–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥</h5>
            <div className="space-y-2 text-sm">
              <div><span className="text-gray-600">–¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã:</span> {campaignData.reward_type}</div>
              <div><span className="text-gray-600">–ó–Ω–∞—á–µ–Ω–∏–µ:</span> {campaignData.reward_value}</div>
              <div><span className="text-gray-600">–û–ø–∏—Å–∞–Ω–∏–µ:</span> {campaignData.reward_description}</div>
            </div>
          </div>
        </div>
      </div>

      {/* –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ */}
      <div>
        <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
          <Link className="w-5 h-5 mr-2 text-blue-600" />
          –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        </h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {Object.keys(channelConfigs).map(channelId => {
            const channelInfo = getChannelInfo(channelId);
            const links = generatedLinks[channelId];
            
            return links ? (
              <LinkCard
                key={channelId}
                channelId={channelId}
                channelName={channelInfo.name}
                links={links}
              />
            ) : null;
          })}
        </div>
      </div>

      {/* –ü—Ä–µ–≤—å—é –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π */}
      <div className="bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-6">
        <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
          <Share2 className="w-5 h-5 mr-2 text-green-600" />
          –ü—Ä–µ–≤—å—é –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
        </h4>
        <div className="bg-white border border-gray-200 rounded-lg p-4 max-w-md">
          <div className="flex items-center space-x-3 mb-3">
            <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
              <span className="text-white font-bold text-sm">ü¶ï</span>
            </div>
            <div>
              <div className="font-semibold text-gray-900">DinoRefs</div>
              <div className="text-sm text-gray-500">dinorefs.com</div>
            </div>
          </div>
          <div className="mb-3">
            <div className="font-medium text-gray-900 mb-1">{campaignData.title}</div>
            <div className="text-sm text-gray-600">{campaignData.description}</div>
          </div>
          <div className="flex items-center space-x-4 text-xs text-gray-500">
            <div className="flex items-center space-x-1">
              <Eye className="w-3 h-3" />
              <span>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</span>
            </div>
            <div className="flex items-center space-x-1">
              <TrendingUp className="w-3 h-3" />
              <span>–ö–æ–Ω–≤–µ—Ä—Å–∏—è</span>
            </div>
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex items-center justify-between pt-6 border-t border-gray-200">
        <button
          onClick={onEdit}
          className="px-6 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50"
        >
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        </button>
        <div className="flex space-x-3">
          <button
            onClick={() => onSave(false)}
            className="px-6 py-2 border border-blue-600 text-blue-600 rounded-md hover:bg-blue-50"
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
          </button>
          <button
            onClick={() => onSave(true)}
            className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center space-x-2"
          >
            <Zap className="w-4 h-4" />
            <span>–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é</span>
          </button>
        </div>
      </div>
    </div>
  );
};

export default CampaignSummary;

