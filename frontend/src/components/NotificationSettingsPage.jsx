import React, { useState, useEffect } from 'react';
import { Settings, Bell, Mail, Smartphone, Monitor, Save, RefreshCw, Clock, Globe } from 'lucide-react';
import Layout from './Layout';
import PushNotificationManager from './PushNotificationManager';
import { showSuccessToast, showErrorToast } from './NotificationToast';

const NotificationSettingsPage = () => {
  const [preferences, setPreferences] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);

  // –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
  const notificationTypes = [
    {
      key: 'project_invitation',
      title: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç—ã',
      description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç–∞–º',
      icon: 'üë•'
    },
    {
      key: 'project_shared',
      title: '–ü–æ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã',
      description: '–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –¥–µ–ª–∏—Ç—Å—è —Å –≤–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–º',
      icon: 'üì§'
    },
    {
      key: 'project_liked',
      title: '–õ–∞–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤',
      description: '–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫ –≤–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É',
      icon: 'üëç'
    },
    {
      key: 'project_commented',
      title: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º',
      description: '–ù–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º',
      icon: 'üí¨'
    },
    {
      key: 'referral_reward',
      title: '–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
      description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
      icon: 'üéâ'
    },
    {
      key: 'referral_conversion',
      title: '–ö–æ–Ω–≤–µ—Ä—Å–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
      description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è—Ö –≤ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏—è—Ö',
      icon: 'üìà'
    },
    {
      key: 'system_announcement',
      title: '–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
      description: '–í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
      icon: 'üì¢'
    },
    {
      key: 'account_security',
      title: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞',
      description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞',
      icon: 'üîí'
    }
  ];

  // –ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const channels = [
    {
      key: 'in_app',
      title: '–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
      description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
      icon: <Monitor size={20} />
    },
    {
      key: 'email',
      title: 'Email',
      description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É',
      icon: <Mail size={20} />
    },
    {
      key: 'push',
      title: 'Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ',
      icon: <Smartphone size={20} />
    }
  ];

  // –ß–∞—Å—Ç–æ—Ç–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const emailFrequencies = [
    { value: 'immediate', label: '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ' },
    { value: 'daily', label: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ' },
    { value: 'weekly', label: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ' }
  ];

  // –ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ (–æ—Å–Ω–æ–≤–Ω—ã–µ)
  const timezones = [
    { value: 'UTC', label: 'UTC (–í—Å–µ–º–∏—Ä–Ω–æ–µ –≤—Ä–µ–º—è)' },
    { value: 'Europe/Moscow', label: '–ú–æ—Å–∫–≤–∞ (UTC+3)' },
    { value: 'Europe/Kiev', label: '–ö–∏–µ–≤ (UTC+2)' },
    { value: 'Asia/Almaty', label: '–ê–ª–º–∞—Ç—ã (UTC+6)' },
    { value: 'Asia/Tashkent', label: '–¢–∞—à–∫–µ–Ω—Ç (UTC+5)' },
    { value: 'Europe/Minsk', label: '–ú–∏–Ω—Å–∫ (UTC+3)' }
  ];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const loadPreferences = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      
      const response = await fetch('/api/notifications/preferences', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        setPreferences(data.preferences);
      } else {
        showErrorToast('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      showErrorToast('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    } finally {
      setLoading(false);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const savePreferences = async () => {
    try {
      setSaving(true);
      const token = localStorage.getItem('token');
      
      const response = await fetch('/api/notifications/preferences', {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(preferences)
      });
      
      if (response.ok) {
        setHasChanges(false);
        showSuccessToast('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      } else {
        showErrorToast('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      showErrorToast('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    } finally {
      setSaving(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∫–∞–Ω–∞–ª–∞
  const updatePreference = (notificationType, channel, enabled) => {
    setPreferences(prev => ({
      ...prev,
      preferences: {
        ...prev.preferences,
        [notificationType]: {
          ...prev.preferences[notificationType],
          [channel]: enabled
        }
      }
    }));
    setHasChanges(true);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const updateSetting = (key, value) => {
    setPreferences(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        [key]: value
      }
    }));
    setHasChanges(true);
  };

  // –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞
  const toggleAllForType = (notificationType, enabled) => {
    channels.forEach(channel => {
      updatePreference(notificationType, channel.key, enabled);
    });
  };

  // –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞
  const toggleAllForChannel = (channelKey, enabled) => {
    notificationTypes.forEach(type => {
      updatePreference(type.key, channelKey, enabled);
    });
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadPreferences();
  }, []);

  if (loading) {
    return (
      <Layout>
        <div className="max-w-4xl mx-auto p-6">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-200 rounded w-1/3 mb-6"></div>
            <div className="space-y-4">
              {[1, 2, 3, 4].map(i => (
                <div key={i} className="h-20 bg-gray-200 rounded"></div>
              ))}
            </div>
          </div>
        </div>
      </Layout>
    );
  }

  if (!preferences) {
    return (
      <Layout>
        <div className="max-w-4xl mx-auto p-6">
          <div className="text-center py-12">
            <Settings className="mx-auto mb-4 text-gray-400" size={48} />
            <h2 className="text-xl font-semibold text-gray-900 mb-2">
              –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </h2>
            <button
              onClick={loadPreferences}
              className="flex items-center space-x-2 mx-auto px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <RefreshCw size={16} />
              <span>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</span>
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="max-w-4xl mx-auto p-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            <Settings className="text-blue-600" size={28} />
            <div>
              <h1 className="text-2xl font-bold text-gray-900">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h1>
              <p className="text-gray-600">
                –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–º, –∫–∞–∫ –∏ –∫–æ–≥–¥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </p>
            </div>
          </div>
          
          {hasChanges && (
            <button
              onClick={savePreferences}
              disabled={saving}
              className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {saving ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              ) : (
                <Save size={16} />
              )}
              <span>{saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}</span>
            </button>
          )}
        </div>

        <div className="space-y-6">
          {/* Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
          <PushNotificationManager />

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Ç–∏–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900 mb-2">
                –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
              </h2>
              <p className="text-gray-600">
                –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏ —á–µ—Ä–µ–∑ –∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã
              </p>
            </div>

            {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ */}
            <div className="px-6 py-3 bg-gray-50 border-b border-gray-200">
              <div className="grid grid-cols-12 gap-4 items-center">
                <div className="col-span-5">
                  <span className="text-sm font-medium text-gray-700">–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                </div>
                {channels.map(channel => (
                  <div key={channel.key} className="col-span-2 text-center">
                    <div className="flex items-center justify-center space-x-1">
                      {channel.icon}
                      <span className="text-sm font-medium text-gray-700">{channel.title}</span>
                    </div>
                    <button
                      onClick={() => {
                        const allEnabled = notificationTypes.every(type => 
                          preferences.preferences[type.key]?.[channel.key]
                        );
                        toggleAllForChannel(channel.key, !allEnabled);
                      }}
                      className="text-xs text-blue-600 hover:text-blue-800 mt-1"
                    >
                      –í—Å–µ
                    </button>
                  </div>
                ))}
                <div className="col-span-1 text-center">
                  <span className="text-sm font-medium text-gray-700">–í—Å–µ</span>
                </div>
              </div>
            </div>

            {/* –°—Ç—Ä–æ–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ */}
            <div className="divide-y divide-gray-200">
              {notificationTypes.map(type => (
                <div key={type.key} className="px-6 py-4">
                  <div className="grid grid-cols-12 gap-4 items-center">
                    <div className="col-span-5">
                      <div className="flex items-center space-x-3">
                        <span className="text-xl">{type.icon}</span>
                        <div>
                          <h3 className="font-medium text-gray-900">{type.title}</h3>
                          <p className="text-sm text-gray-600">{type.description}</p>
                        </div>
                      </div>
                    </div>
                    
                    {channels.map(channel => (
                      <div key={channel.key} className="col-span-2 text-center">
                        <label className="inline-flex items-center">
                          <input
                            type="checkbox"
                            checked={preferences.preferences[type.key]?.[channel.key] || false}
                            onChange={(e) => updatePreference(type.key, channel.key, e.target.checked)}
                            className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                          />
                        </label>
                      </div>
                    ))}
                    
                    <div className="col-span-1 text-center">
                      <button
                        onClick={() => {
                          const allEnabled = channels.every(channel => 
                            preferences.preferences[type.key]?.[channel.key]
                          );
                          toggleAllForType(type.key, !allEnabled);
                        }}
                        className="text-sm text-blue-600 hover:text-blue-800"
                      >
                        {channels.every(channel => preferences.preferences[type.key]?.[channel.key]) ? '–í—ã–∫–ª' : '–í–∫–ª'}
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900 mb-2">
                –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </h2>
              <p className="text-gray-600">
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
              </p>
            </div>

            <div className="p-6 space-y-6">
              {/* –ß–∞—Å—Ç–æ—Ç–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Mail className="inline mr-2" size={16} />
                  –ß–∞—Å—Ç–æ—Ç–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                </label>
                <select
                  value={preferences.settings?.email_frequency || 'immediate'}
                  onChange={(e) => updateSetting('email_frequency', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  {emailFrequencies.map(freq => (
                    <option key={freq.value} value={freq.value}>
                      {freq.label}
                    </option>
                  ))}
                </select>
                <p className="text-sm text-gray-500 mt-1">
                  –ö–∞–∫ —á–∞—Å—Ç–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                </p>
              </div>

              {/* –¢–∏—Ö–∏–µ —á–∞—Å—ã */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    <Clock className="inline mr-2" size={16} />
                    –¢–∏—Ö–∏–µ —á–∞—Å—ã (–Ω–∞—á–∞–ª–æ)
                  </label>
                  <input
                    type="time"
                    value={preferences.settings?.quiet_hours_start || ''}
                    onChange={(e) => updateSetting('quiet_hours_start', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –¢–∏—Ö–∏–µ —á–∞—Å—ã (–∫–æ–Ω–µ—Ü)
                  </label>
                  <input
                    type="time"
                    value={preferences.settings?.quiet_hours_end || ''}
                    onChange={(e) => updateSetting('quiet_hours_end', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
              <p className="text-sm text-gray-500">
                –í —ç—Ç–æ –≤—Ä–µ–º—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã
              </p>

              {/* –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Globe className="inline mr-2" size={16} />
                  –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                </label>
                <select
                  value={preferences.settings?.timezone || 'UTC'}
                  onChange={(e) => updateSetting('timezone', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  {timezones.map(tz => (
                    <option key={tz.value} value={tz.value}>
                      {tz.label}
                    </option>
                  ))}
                </select>
                <p className="text-sm text-gray-500 mt-1">
                  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                </p>
              </div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex items-center justify-between">
            <button
              onClick={loadPreferences}
              className="flex items-center space-x-2 px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              <RefreshCw size={16} />
              <span>–°–±—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</span>
            </button>

            <button
              onClick={savePreferences}
              disabled={!hasChanges || saving}
              className="flex items-center space-x-2 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {saving ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              ) : (
                <Save size={16} />
              )}
              <span>{saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}</span>
            </button>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default NotificationSettingsPage;

