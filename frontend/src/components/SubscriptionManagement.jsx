import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  CreditCard, 
  Calendar, 
  CheckCircle, 
  AlertTriangle, 
  ArrowUpCircle,
  Download,
  Clock,
  Crown
} from 'lucide-react';
import { getPlanLimits } from '../utils/planLimits';
import { PlanUsageStats } from './PlanLimitNotification';

const SubscriptionManagement = ({ onUpgrade }) => {
  const [subscription, setSubscription] = useState(null);
  const [paymentHistory, setPaymentHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [usage, setUsage] = useState({
    projects: 1,
    campaigns: 1,
    referrals: 25
  });

  useEffect(() => {
    loadSubscriptionData();
  }, []);

  const loadSubscriptionData = async () => {
    try {
      setLoading(true);
      
      // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
      const mockSubscription = {
        id: 'sub_123456',
        planId: 'free',
        status: 'active',
        currentPeriodStart: '2025-08-01',
        currentPeriodEnd: '2025-09-01',
        cancelAtPeriodEnd: false,
        trialEnd: null,
        amount: 0,
        currency: 'RUB',
        paymentMethod: null
      };

      const mockPaymentHistory = [
        {
          id: 'pay_001',
          amount: 0,
          currency: 'RUB',
          status: 'succeeded',
          created: '2025-08-01',
          description: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–ª–∞–Ω Dino Egg'
        }
      ];

      setSubscription(mockSubscription);
      setPaymentHistory(mockPaymentHistory);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCancelSubscription = async () => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? –û–Ω–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.')) {
      return;
    }

    try {
      // API –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
      console.log('–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏...');
      
      setSubscription(prev => ({
        ...prev,
        cancelAtPeriodEnd: true
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    }
  };

  const handleReactivateSubscription = async () => {
    try {
      // API –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
      console.log('–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...');
      
      setSubscription(prev => ({
        ...prev,
        cancelAtPeriodEnd: false
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
  };

  const formatAmount = (amount, currency) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: currency
    }).format(amount);
  };

  const getPlanIcon = (planId) => {
    const icons = {
      free: 'ü•ö',
      starter: 'ü¶ï',
      growth: 'ü¶ñ',
      enterprise: 'üëë'
    };
    return icons[planId] || 'üì¶';
  };

  const getStatusBadge = (status, cancelAtPeriodEnd) => {
    if (cancelAtPeriodEnd) {
      return <Badge variant="destructive">–û—Ç–º–µ–Ω—è–µ—Ç—Å—è</Badge>;
    }
    
    switch (status) {
      case 'active':
        return <Badge variant="default" className="bg-green-500">–ê–∫—Ç–∏–≤–Ω–∞</Badge>;
      case 'trialing':
        return <Badge variant="secondary">–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</Badge>;
      case 'past_due':
        return <Badge variant="destructive">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞</Badge>;
      case 'canceled':
        return <Badge variant="outline">–û—Ç–º–µ–Ω–µ–Ω–∞</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  const getPaymentStatusIcon = (status) => {
    switch (status) {
      case 'succeeded':
        return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'pending':
        return <Clock className="w-4 h-4 text-yellow-500" />;
      case 'failed':
        return <AlertTriangle className="w-4 h-4 text-red-500" />;
      default:
        return <Clock className="w-4 h-4 text-gray-500" />;
    }
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="h-32 bg-gray-200 rounded-lg mb-4"></div>
          <div className="h-48 bg-gray-200 rounded-lg mb-4"></div>
          <div className="h-32 bg-gray-200 rounded-lg"></div>
        </div>
      </div>
    );
  }

  if (!subscription) {
    return (
      <Alert>
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>
          –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        </AlertDescription>
      </Alert>
    );
  }

  const planLimits = getPlanLimits(subscription.planId);

  return (
    <div className="space-y-6">
      {/* –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CreditCard className="w-5 h-5" />
            –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
          </CardTitle>
          <CardDescription>
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º —Ç–∞—Ä–∏—Ñ–Ω—ã–º –ø–ª–∞–Ω–æ–º –∏ –ø–æ–¥–ø–∏—Å–∫–æ–π
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <span className="text-2xl">{getPlanIcon(subscription.planId)}</span>
              <div>
                <h3 className="text-lg font-semibold">{planLimits.name}</h3>
                <p className="text-sm text-gray-600">
                  {subscription.amount > 0 
                    ? `${formatAmount(subscription.amount, subscription.currency)} –≤ –º–µ—Å—è—Ü`
                    : '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω'
                  }
                </p>
              </div>
            </div>
            {getStatusBadge(subscription.status, subscription.cancelAtPeriodEnd)}
          </div>

          {subscription.cancelAtPeriodEnd && (
            <Alert>
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞ {formatDate(subscription.currentPeriodEnd)}. 
                –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω.
              </AlertDescription>
            </Alert>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t">
            <div>
              <p className="text-sm text-gray-600">–ü–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏</p>
              <p className="font-medium">
                {formatDate(subscription.currentPeriodStart)} - {formatDate(subscription.currentPeriodEnd)}
              </p>
            </div>
            {subscription.paymentMethod && (
              <div>
                <p className="text-sm text-gray-600">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</p>
                <p className="font-medium">{subscription.paymentMethod}</p>
              </div>
            )}
          </div>

          <div className="flex gap-2 pt-4">
            {subscription.planId !== 'enterprise' && (
              <Button onClick={onUpgrade} className="flex items-center gap-2">
                <ArrowUpCircle className="w-4 h-4" />
                –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω
              </Button>
            )}
            
            {subscription.planId !== 'free' && (
              <>
                {subscription.cancelAtPeriodEnd ? (
                  <Button 
                    variant="outline" 
                    onClick={handleReactivateSubscription}
                  >
                    –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                  </Button>
                ) : (
                  <Button 
                    variant="outline" 
                    onClick={handleCancelSubscription}
                  >
                    –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                  </Button>
                )}
              </>
            )}
          </div>
        </CardContent>
      </Card>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è */}
      <PlanUsageStats 
        planId={subscription.planId}
        usage={usage}
        onUpgrade={onUpgrade}
      />

      {/* –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="w-5 h-5" />
            –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
          </CardTitle>
          <CardDescription>
            –í—Å–µ –≤–∞—à–∏ –ø–ª–∞—Ç–µ–∂–∏ –∏ —Å—á–µ—Ç–∞
          </CardDescription>
        </CardHeader>
        <CardContent>
          {paymentHistory.length === 0 ? (
            <p className="text-gray-600 text-center py-8">
              –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞
            </p>
          ) : (
            <div className="space-y-3">
              {paymentHistory.map((payment) => (
                <div 
                  key={payment.id}
                  className="flex items-center justify-between p-3 border rounded-lg"
                >
                  <div className="flex items-center gap-3">
                    {getPaymentStatusIcon(payment.status)}
                    <div>
                      <p className="font-medium">{payment.description}</p>
                      <p className="text-sm text-gray-600">
                        {formatDate(payment.created)}
                      </p>
                    </div>
                  </div>
                  
                  <div className="text-right">
                    <p className="font-medium">
                      {formatAmount(payment.amount, payment.currency)}
                    </p>
                    <Button variant="ghost" size="sm" className="h-auto p-1">
                      <Download className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º –ø–ª–∞—Ç–µ–∂–µ */}
      {subscription.planId !== 'free' && !subscription.cancelAtPeriodEnd && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Clock className="w-5 h-5" />
              –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <div>
                <p className="font-medium">
                  {formatAmount(subscription.amount, subscription.currency)}
                </p>
                <p className="text-sm text-gray-600">
                  –ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω {formatDate(subscription.currentPeriodEnd)}
                </p>
              </div>
              <Badge variant="outline">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</Badge>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default SubscriptionManagement;

