// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ

class PushNotificationService {
  constructor() {
    this.isSupported = 'Notification' in window;
    this.permission = this.isSupported ? Notification.permission : 'denied';
    this.registration = null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  isNotificationSupported() {
    return this.isSupported;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  getPermissionStatus() {
    return this.permission;
  }

  // –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async requestPermission() {
    if (!this.isSupported) {
      throw new Error('Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    }

    if (this.permission === 'granted') {
      return 'granted';
    }

    if (this.permission === 'denied') {
      throw new Error('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
    }

    try {
      const permission = await Notification.requestPermission();
      this.permission = permission;
      
      if (permission === 'granted') {
        console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');
        return permission;
      } else {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  showNotification(title, options = {}) {
    if (!this.isSupported || this.permission !== 'granted') {
      console.warn('–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      return null;
    }

    const defaultOptions = {
      icon: '/favicon.ico',
      badge: '/favicon.ico',
      tag: 'dinorefs-notification',
      requireInteraction: false,
      silent: false,
      ...options
    };

    try {
      const notification = new Notification(title, defaultOptions);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ)
      if (!defaultOptions.requireInteraction) {
        setTimeout(() => {
          notification.close();
        }, defaultOptions.duration || 5000);
      }

      return notification;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return null;
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (—Ç—Ä–µ–±—É–µ—Ç Service Worker)
  async showAdvancedNotification(title, options = {}) {
    if (!this.registration) {
      await this.registerServiceWorker();
    }

    if (!this.registration) {
      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
      return this.showNotification(title, options);
    }

    const defaultOptions = {
      icon: '/favicon.ico',
      badge: '/favicon.ico',
      tag: 'dinorefs-notification',
      requireInteraction: false,
      silent: false,
      data: {},
      ...options
    };

    try {
      await this.registration.showNotification(title, defaultOptions);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
      return this.showNotification(title, options);
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async registerServiceWorker() {
    if (!('serviceWorker' in navigator)) {
      console.warn('Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      return null;
    }

    try {
      const registration = await navigator.serviceWorker.register('/sw.js');
      this.registration = registration;
      console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
      return registration;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
      return null;
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  showMessageNotification(senderName, message, projectName = null) {
    const title = projectName 
      ? `${senderName} –≤ –ø—Ä–æ–µ–∫—Ç–µ ${projectName}`
      : `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${senderName}`;
    
    return this.showNotification(title, {
      body: message,
      icon: '/icons/message.png',
      tag: 'message-notification',
      data: {
        type: 'message',
        sender: senderName,
        project: projectName
      }
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç
  showProjectInvitationNotification(inviterName, projectName, invitationUrl) {
    const title = '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç';
    const body = `${inviterName} –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –≤ –ø—Ä–æ–µ–∫—Ç "${projectName}"`;
    
    return this.showAdvancedNotification(title, {
      body,
      icon: '/icons/invitation.png',
      tag: 'project-invitation',
      requireInteraction: true,
      actions: [
        {
          action: 'accept',
          title: '–ü—Ä–∏–Ω—è—Ç—å',
          icon: '/icons/accept.png'
        },
        {
          action: 'view',
          title: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
          icon: '/icons/view.png'
        }
      ],
      data: {
        type: 'project_invitation',
        inviter: inviterName,
        project: projectName,
        url: invitationUrl
      }
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ
  showLikeNotification(likerName, projectName, projectUrl) {
    const title = '–ù–æ–≤—ã–π –ª–∞–π–∫!';
    const body = `${likerName} –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ –≤–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É "${projectName}"`;
    
    return this.showNotification(title, {
      body,
      icon: '/icons/like.png',
      tag: 'like-notification',
      data: {
        type: 'project_liked',
        liker: likerName,
        project: projectName,
        url: projectUrl
      }
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
  showCommentNotification(commenterName, projectName, comment, projectUrl) {
    const title = '–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';
    const body = `${commenterName} –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª "${projectName}": ${comment}`;
    
    return this.showAdvancedNotification(title, {
      body,
      icon: '/icons/comment.png',
      tag: 'comment-notification',
      actions: [
        {
          action: 'reply',
          title: '–û—Ç–≤–µ—Ç–∏—Ç—å',
          icon: '/icons/reply.png'
        },
        {
          action: 'view',
          title: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
          icon: '/icons/view.png'
        }
      ],
      data: {
        type: 'project_commented',
        commenter: commenterName,
        project: projectName,
        comment,
        url: projectUrl
      }
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–≥—Ä–∞–¥–µ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  showReferralRewardNotification(rewardAmount, rewardType, campaignName) {
    const title = '–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! üéâ';
    const body = `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${rewardAmount} ${rewardType} –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ –∫–∞–º–ø–∞–Ω–∏–∏ "${campaignName}"`;
    
    return this.showNotification(title, {
      body,
      icon: '/icons/reward.png',
      tag: 'referral-reward',
      requireInteraction: true,
      data: {
        type: 'referral_reward',
        amount: rewardAmount,
        rewardType,
        campaign: campaignName
      }
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  showSystemNotification(title, message, actionUrl = null) {
    return this.showAdvancedNotification(title, {
      body: message,
      icon: '/icons/system.png',
      tag: 'system-notification',
      requireInteraction: !!actionUrl,
      actions: actionUrl ? [
        {
          action: 'view',
          title: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
          icon: '/icons/view.png'
        }
      ] : [],
      data: {
        type: 'system_announcement',
        url: actionUrl
      }
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  showSecurityNotification(event, details, actionRequired = false) {
    const title = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏';
    const body = `${event}: ${details}`;
    
    return this.showAdvancedNotification(title, {
      body,
      icon: '/icons/security.png',
      tag: 'security-notification',
      requireInteraction: actionRequired,
      actions: actionRequired ? [
        {
          action: 'check',
          title: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
          icon: '/icons/security.png'
        }
      ] : [],
      data: {
        type: 'account_security',
        event,
        details,
        actionRequired
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
  handleNotificationClick(event) {
    const notification = event.notification;
    const data = notification.data || {};
    
    notification.close();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    switch (data.type) {
      case 'project_invitation':
        if (event.action === 'accept' && data.url) {
          window.open(data.url, '_blank');
        } else if (event.action === 'view' && data.url) {
          window.open(data.url, '_blank');
        }
        break;
        
      case 'project_commented':
        if (event.action === 'reply' && data.url) {
          window.open(data.url + '#comments', '_blank');
        } else if (event.action === 'view' && data.url) {
          window.open(data.url, '_blank');
        }
        break;
        
      case 'project_liked':
        if (data.url) {
          window.open(data.url, '_blank');
        }
        break;
        
      case 'referral_reward':
        window.open('/referrals', '_blank');
        break;
        
      case 'system_announcement':
        if (data.url) {
          window.open(data.url, '_blank');
        }
        break;
        
      case 'account_security':
        if (event.action === 'check') {
          window.open('/profile/security', '_blank');
        }
        break;
        
      default:
        // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        window.open('/', '_blank');
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async clearAllNotifications() {
    if (this.registration) {
      const notifications = await this.registration.getNotifications();
      notifications.forEach(notification => notification.close());
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async getActiveNotifications() {
    if (this.registration) {
      return await this.registration.getNotifications();
    }
    return [];
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–≥–æ–º
  async hasActiveNotification(tag) {
    const notifications = await this.getActiveNotifications();
    return notifications.some(notification => notification.tag === tag);
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const pushNotificationService = new PushNotificationService();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker
    await pushNotificationService.registerServiceWorker();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Service Worker
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.addEventListener('message', (event) => {
        if (event.data && event.data.type === 'notification-click') {
          pushNotificationService.handleNotificationClick(event.data);
        }
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
});

export default pushNotificationService;

