from flask import Blueprint, request, jsonify
import uuid
from datetime import datetime, timedelta

payments_bp = Blueprint('payments', __name__)

# –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
PRICING_PLANS = {
    'starter': {
        'name': 'Baby Dino',
        'price': 2800,
        'currency': 'RUB',
        'features': ['1000 referrals/month', '3 projects', 'Extended analytics']
    },
    'growth': {
        'name': 'T-Rex', 
        'price': 9500,
        'currency': 'RUB',
        'features': ['10000 referrals/month', '10 projects', 'API access', 'White-label']
    }
}

@payments_bp.route('/plans', methods=['GET'])
def get_pricing_plans():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
    return jsonify({
        'success': True,
        'plans': PRICING_PLANS
    })

@payments_bp.route('/create-payment', methods=['POST'])
def create_payment():
    """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    try:
        data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['plan_id', 'payment_method']
        for field in required_fields:
            if field not in data:
                return jsonify({
                    'success': False,
                    'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                }), 400
        
        plan_id = data['plan_id']
        payment_method = data['payment_method']  # 'yoomoney' –∏–ª–∏ 'sbp'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
        if plan_id not in PRICING_PLANS:
            return jsonify({
                'success': False,
                'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω'
            }), 400
        
        plan = PRICING_PLANS[plan_id]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
        payment_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        if payment_method == 'yoomoney':
            payment_url = f"https://yoomoney.ru/quickpay/confirm.xml?receiver=123456&quickpay-form=shop&targets=–ü–æ–¥–ø–∏—Å–∫–∞ {plan['name']}&paymentType=AC&sum={plan['price']}&label={payment_id}"
        elif payment_method == 'sbp':
            payment_url = f"https://sbp-test.nspk.ru/payment?orderId={payment_id}&amount={plan['price']}"
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã'
            }), 400
        
        return jsonify({
            'success': True,
            'payment_id': payment_id,
            'payment_url': payment_url,
            'amount': plan['price'],
            'currency': plan['currency'],
            'plan_name': plan['name'],
            'expires_at': (datetime.now() + timedelta(hours=1)).isoformat()
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}'
        }), 500

@payments_bp.route('/status/<payment_id>', methods=['GET'])
def get_payment_status(payment_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return jsonify({
            'success': True,
            'payment_id': payment_id,
            'status': 'pending',  # pending, completed, failed, expired
            'amount': 2800,
            'currency': 'RUB',
            'created_at': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}'
        }), 500

@payments_bp.route('/webhook/yoomoney', methods=['POST'])
def yoomoney_webhook():
    """Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆMoney"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ÆMoney
        notification_data = request.form.to_dict()
        
        payment_id = notification_data.get('label')
        operation_id = notification_data.get('operation_id')
        amount = float(notification_data.get('amount', 0))
        status = notification_data.get('status')
        
        if status == 'success':
            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ –ÆMoney")
        
        return 'OK', 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ÆMoney: {e}")
        return 'Error', 500

@payments_bp.route('/webhook/sbp', methods=['POST'])
def sbp_webhook():
    """Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –°–ë–ü"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –°–ë–ü
        notification_data = request.get_json()
        
        payment_id = notification_data.get('orderId')
        amount = notification_data.get('amount', 0) / 100  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ –∫–æ–ø–µ–µ–∫
        status = notification_data.get('status')
        
        if status == 'PAID':
            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ –°–ë–ü")
        
        return jsonify({'result': 'OK'}), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –°–ë–ü: {e}")
        return jsonify({'error': 'Internal error'}), 500

# –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@payments_bp.route('/methods', methods=['GET'])
def get_payment_methods():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã"""
    try:
        methods = [
            {
                'id': 'yoomoney',
                'name': '–ÆMoney',
                'description': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏',
                'icon': 'üí≥'
            },
            {
                'id': 'sbp',
                'name': '–°–ë–ü',
                'description': '–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π',
                'icon': 'üì±'
            }
        ]
        return jsonify({
            'methods': methods
        })
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã: {str(e)}'}), 500



